#!/bin/bash
#
# Build Debian and Ubuntu packages from a tarball.
#
# This is the script that our Jenkins/CI system runs. Yes, it is a bit messy.
#
#
# For running this on your own computer (jessie), see https://wiki.debian.org/mk-sbuild
# for information on setting up sbuild.
# Short version: 1) apt-get install ubuntu-dev-tools 2) mk-sbuild jessie
#
# To CHANGE the golden image: sudo schroot -c source:jessie-amd64 -u root
# To ENTER an image snapshot: schroot -c jessie-amd64
# To BUILD within a snapshot: sbuild -A -d jessie-amd64 PACKAGE*.dsc

BINDISTS=${BINDISTS:-artful}
set -o errexit

. common.sh

rm -rf build
mkdir -p build

SOURCE=$(ls -1 sources/hitch-*.tar.gz 2>/dev/null)
findversion "$SOURCE"

tar xf "${SOURCE}" -C build

cd build/hitch-*
cp -r ../../debian .
rm -f debian/.*.sw?    # Delete any vim temporary files.

ln "../../$SOURCE" "../hitch_$V.$MINOR.orig.tar.gz"

# Modify Section to suit our repository software.
#sed -i -e "s|^Section: \([^/]*\)\$|Section: varnish-$V/\1|" debian/control

# Take version override set on Jenkins builds into account.
#if [ -n "$WEEKLY_VERSION" ]; then
#    FULL_VERSION="${WEEKLY_VERSION}+${DEBVERSION}"
#    dch -v "$FULL_VERSION" "Release build #$BUILD_NUMBER ID: $BUILD_ID"
#elif [[ -n "${DEBVERSION}" ]]; then
#    if [ "$RELEASE" == "" ]; then
#	    FULL_VERSION="$V.$MINOR-$DEBVERSION"
#    else
#	    FULL_VERSION="$V.$MINOR~$RELEASE-$DEBVERSION"
#    fi
#	dch -v "$FULL_VERSION" "Release build #$BUILD_NUMBER ID: $BUILD_ID"
#else


FULL_VERSION="$V.$MINOR-0${RELEASE}+daily+$(date +%Y%m%d.%H%M%S)"
export DEBEMAIL="Lasse Karstensen <lasse.karstensen@gmail.com>"
dch -D artful -v "$V.$MINOR-0${RELEASE}+daily+$(date +%Y%m%d.%H%M%S)" "Automatic build from git"
#dch -D artful -v "$V.$MINOR-0" "Automatic build from git"
#head debian/changelog

# Generate the source package used by subsequent sbuilds
dpkg-buildpackage -S -j10 \
       --sign-key=25C0AEC3D0D2AB90C20F1EB1E39FF2B43D24CCDD

# Work dir is build/
cd ..

echo "Upload command:    dput -c dputcf ppa:lasse-karstensen/hitch build/*changes"


# By now we are done setting up and building the source package.

# Build binary packages for the requested releases inside chroots.
for dist in $BINDISTS; do
	# Legacy packages embedded the release into the package version.
	export DEBIAN_OVERRIDE_BINARY_VERSION="$FULL_VERSION~$dist"
	sbuild -v -A -c "$dist-amd64$chroot_postfix" -d "$dist" hitch_*.dsc
done
